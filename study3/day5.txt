express - session 모듈
express 프레임워크에서 세션을 관리하기 위해 사용하는 미들웨어 모듈입니다.

app.use(session({세션모듈의 옵션}));
* 세션모듈의 옵션
recret : 쿠키를 임의로 변조하는 것을 방지하기 위한 값입니다. 이 값을 통하여 세션을 암호화하여 저장합니다.
resave : 세션을 언제나 저장할지 정하는값.이 값을 false로 하는 것을 권장하고 필요에 따라 true로 설정하기도합니다.
saveUninitialized : 세션이 저장되기 전에 uninitialized 상태로 미리 만들어서 저장합니다.

세션 초기 설정
sess = req.session;
sess.userid = 'apple';

세션 변수 사용 방법
console.log(sess.userid);

세션 삭제
req.session.destroy(() => {
	세션 삭제시 처리할 문장;
})

*destroy() 메소드 안에서는 세션에 접근할 수 없습니다.

NoSQL
Not Only SQL의 약자입니다. 기존의 RDBMS의 한계를 극복하기 위해 만들어진 새로운 형태의 데이터베에ㅣ스입니다.
관계형 DB가 아님으로 rdbms처럼 고정된 스키마 및 join문이 존재하지 않습니다.
테이블이 존재하지않다.

NoSQL을 사용하는 이유
가장 큰 이유는 성능 때문입니다. 관계형 데이터베이스는 시스템의 신뢰도를 높이는데 필요한 장치를 많이 가지고 있습니다.
SQL문을 읽고 실행하는데 많은 리소스를 사용하며 성능이 떨어지는 경우가 많습니다. 반대로 NoSQL은 성능을 최 우선으로
생각하여 실시간으로 처리해야 할 경우나 대용량 트래픽을 감당할 수 있는 메시징 시스템등에 활용됩니다.


mongDB
C++로 작성된 오픈소스문서지향적 데이터베이스이며, 뛰어난 확장성과 성능을 자랑합니다. 또한 현존하는
NoSQL 데이터베이스 중에서 가장 많은 사용률을 기록하고 있습니다.

mongoDB 다운로드
https://www.mongodb.com/

mongoDB 환경설정
1. 파일탐색기 -> 내pc -> 오른쪽버튼클릭->속성->고급 시스템설정->환경변수 ->시스템 변수에서 path를 찾고-> 편집->
C:\Program Files\MongoDB\Server\4.4\bin

2.cmd 창에서 mongo 엔터


mongoDB의 특징

-NoSQL 이기 때문에 관계형 데이터베이스의 테이블 개념이 없습니다.
-데이터가 모인 하나의 단위를 컬렉션이라고 부릅니다.
-데이터를 정해놓은 컬럼의 형태로 컬렉션에 넣어야 한다는 제약이 없습니다.
-mongoDB의 데이터베이스는 컬렉션의 집합이라고 할 수 있습니다.

데이터 -> 컬렉션 -> 데이터베이스
- 컬렉션은 여러개의 문서 객체를 가질 수 있습니다. 문서 객체는 속성들의 집합으로서 한 사람의 이름과 나이 등을
저장하고 있는 하나의 문서 객체를 만든 후 그 안에 자바스크립트 객체와 같이 속성들을 추가하여 저장할 수 있습니다.
데이터	 	-> 		컬렉션 		->		 데이터베이스
-------
데이터는 즉
자바스크립트의 객체
ex){"id":1234567,"userid":"apple","userpw":"1111"...}
이게 모여 컬렉션이 되고 
컬렉션이모여 데이터베이스가 된다.
이거를 mongoDB에서는 document 라고 부른다.


document
RDBMS의 record 와 비슷한 개념입니다. 데이터 구조는 한개 이상의 key-value-pair로 이루어져있습니다.
Document는 동적인 스키마를 가지고 있습니다. 같은 collection 안에 있는 document끼리 다른 스키마를 가지고 있을 수 
있습니다.

collection

{"id":1234567,"userid":"apple","userpw":"1111"...}
{"id":1234567,"userid":"apple","userpw":"1111"...}
{"id":1234567,"userid":"apple","userpw":"1111"...}
RDBMS는 이렇게 똑같이 드갈수있는데
MONGODB에서는 
어떤데이터는 패스어드까지 있을수도있고
어떤데이터엔 GENDER라는 항목이 있을수도있고 
뭐 되게 서로 다른 스키마를 가질 수 있다. 저장되는 필드가 ㅣㅣㅣㅣ가로로 같은 타입이 아니어도 된다.
각자의 FIELD가 다 달라도 된다.
데이터를 즉 막 집어넣을수 있다는 말임.

collection
MongoDB의 Document 그룹입니다. collection 내부에 document 들이 위치하고 있습니다. RDBMS의 table과 비슷한 개념이지만
RDBMS와 달리 스키마를 따로 가지지 않습니다. document들이 동적인 스키마를 가지고 있기 때문입니다.
별도의 규격이 없다는 말임


{"id":1234567,"userid":"apple","userpw":"1111"...}
{"id":1234567,"userid":"apple","userpw":"1111"...}
{"id":1234567,"userid":"apple","userpw":"1111"...}

MongoDB 문법

데이터베이스 확인
cmd에 
mongo ->show dbs;
데이터베이스 확인

데이터베이스 생성(선택) : 데이터베이스가 없으면 생성하고,있으면 선택해준다.
use 데이터베이스명;
use nodedb;

*데이터베이스의 자료가 없을 경우 show dbs에서 나타나지 않습니다.


컬렉션 생성
db.coreateCollection("컬렉션명");
db.createCollection("testCollection");

컬렉션 확인
show collections;

컬렉션 삭제
db.컬렉션명.drop();
db.testCollection.drop();

db.createCollection("member");

document 추가
db.컬렉션명.insert(자바스크립트의 객체);
db.member.insert({"userid":"apple","userpw":"1234","username":"김사과"});
db.member.insert({"userid","orange","userpw":"1111","username":"오렌지","age":"25"});
db.member.insert({"userid","banana","userpw":"0000","username":"반하나","age":"25","gender":"여자"});
db.member.insert({"userid":"melon","username":"이메론","gender":"여자","point":1000});
db.member.insert({"userid":"cherry","username":"체리","gender":"여자","point":2000});
db.member.insert({"userid":"avocado","userpw":"1010","username:"안카도"});
db.member.insert({"userid":"berry","userpw":"2222","username":"베리","age":"23"});
db.member.insert({"userid":"coconut","userpw":"3333","username":"고코넛","age":"28"});

* _id는 각 document의 유일한 키로 쓰이는 값입니다.




document 확인
db.컬렉션명.find();
db.member.find(); 

db.컬렉션명.find().pretty();
db.member.find().pretty();

내가 보고싶은거만 보려면
db.컬렉션명.find(자바스크립트 객체).pretty();
db.member.find({'userid':"apple"}).pretty();



document 비교연산
$eq : 주어진 값과 일치하는 값을 찾습니다.
$gt : 주어진 값보다 큰 값을 찾습니다.
$gte : 주어진 값보다 크거나 같은 값을 찾습니다.
$lt : 주어진 값보다 작은 값을 찾습니다.
$lte : 주어진 값보다 작거나 같은 값을 찾습니다.
$ne : 주어진 값과 일치하지 않는 값을 찾습니다.
$in : 주어진 배열 안에 속하는 값을 찾습니다.
$nin : 주어진 배열안에 속하지 않는 값을 찾습니다.

문제. 나이가 25살보다 작은 멤버를 검색합니다.
db.member.find({age:{$lt:27}}).pretty();


document 논리연산
&or : 주어진 조건 중에서 하나라도 true일때 true인 결과를 찾습니다.
$and : 주어진 모든 조건이 true일 때 true 인 결과를 찾습니다.
$not : 주어진 조건이 false일 때 true , true일 때 false 인 결과를 찾습니다.
$nor : 주어진 모든 조건이 다를 때 true, 같을 때 false인 결과를 찾습니다.

문제 . 아이디가 "melon"이고 이름이 "이메론"인 멤버를 검색합니다.
db.member.find({$and:[{"userid":"melon"},{"username":"이메론"}]}).pretty();
앞에꺼랑 뒤에꺼랑 and연산이 되어서 그에대한 결과가 나온다.



실습
1.  이름이 "안카도"인 멤버를 검색합니다.
db.member.find({"username":"안카도"}).pretty();
2. 나이가 25살보다 크거나 같은 멤버를 검색합니다.
db.member.find({age:{$gte:25}}).pretty();
나이가 25살 이상인 멤버를 찾아달라
3. 아이디가 "apple"이거나 "banana"인 멤버를 검색합니다.
db.member.find({$or:[{"userid":"apple"},{"userid":"banana"}]}).pretty();
4. 아이디가 "cherry" 이고 포인트가 2000인 멤버를 검색합니다.
db.member.find({ $and:[{"userid":"cherry"},{"point":"2000"}]  }).pretty();
5. 성별이"남자"이고 나이가 25살 이상인 멤버를 검색합니다.
db.member.find({ $and:[{"gender":"남자"} ,{"age":{$gte:25}}] }).pretty();

document sort(정렬)
db.컬렉션명.find().sort(sort 자바스크립트 객체);


*  sort 자바스크립트 객체
{key:value} 형태의 데이터로 , key는 데이터 field 이름이고, value의 값은 1또는 -1입니다. 1로 설정하면 오름차순이며,-1로
설정하면 내림차순입니다. 또한 여러 key를 입력할 수 있고,먼저 입력한 key가 우선권을 갖습니다.

문제. 회원가입한 순으로 내림차순(최근 가입순)으로 정렬합니다.
db.member.find().sort({"_id":-1}).pretty();
_id 하면 id 값이 알아서 증가한다는데 무슨말인지 ㅇㅎ id 키값이 증가한다는말씀인듯
그니까 역순으로해주면 가입한 순서인거임

document 개수의 제한
limit() : 출력할 데이터 개수를 제한할 때 사용합니다.
db.컬렉션명.find().limit(출력할 개수).pretty();
이러면 내가 원하는 갯수를 출력할수있다.

문제.회원가입한 순으로 내림차순으로 정렬한 뒤 3명의 멤버만 검색합니다.
db.member.find().sort({"_id":-1}).limit(3).pretty();

document 데이터 생략 후 출력
skip() : 출력할 데이터의 시작부분을 설정할 경우 사용합니다.
db.컬렉션명.find().skip(생략할 갯수);
db.member.find().skip(3).pretty();

실습. member 컬렉션의 데이터를 아래와 같이 순서에 따라 출력합니다.

1.아래와 같이 출력합니다.
김사과 오렌지 반하나
db.member.find().limit(3).pretty();
2.
이멜론
체리
안카도
db.member.find().skip(3).limit(3).pretty();
3.
베리
고코넛
db.member.find()skip(6).limit(3).pretty();


x=1
김사과 객체
오렌지 객체
반하나 객체

x=2 
이멜론 객체
체리 객체
안카도객체

x=3
베리 객체
고코넛객체 이렇게 나온다.
* db.member.find().skip((x-1)*3).limit(3).pretty();
* 최신순(내림차순)
db.member.find().sort({_id:-1}).skip((x-1)*3).limit(3).pretty();


데이터 수정
document update(수정)
특정 field 업데이트
db.컬렉션명.update(변경할 객체,{$set:바뀔 객체});
db.member.update({"userid":"berry"},{$set:{"username":"베에리"}});

특정 객체 변경
db.컬렉션명.update(변경할 객체,바뀔 객체);
db.member.update({"userid":"avocado"},{"userid":"avocado","username":"안복도","age":"30","point":"1500"});

document update를 사용한 delete(삭제)
db.컬렉션명.update(변경할 객체,{$unset:{제거할 필드:1}});
db.member.update({"username":"안복도"},{$unset:{point:1}});
*   :1은 true의 의미입니다.

document update를 사용한 insert(객체 추가)
db.컬렉션명.update(변경할 객체,{추가할 필드,추가할 필드 ....}),{upsert:true});
db.member.update({"userid":"lime"},{"username":"라임","age":21,"gender":"여자","point":"1500",{upsert:true}});
*위 문장을 사용하면 찾는 객체가 없다면 새로 추가됩니다.


여러 document의 특정 field 를 수정
db.컬렉션명.update(적용할 객체,$set:{수정할 필드},{multi : true})


문제.나이가 25살인 멤버의 비밀번호를 "1234"로 설정(변경)합니다.
db.member.update({age:{$eq:25}},{$set:{"userpw":"1234"}},{multi:true});

document의 remove(삭제)
db.컬렉션명.remove(자바스크립트 객체);
db.member.remove({"username":"안복도"});


Create(데이터 삽입)
Read(데이터 select)
Update(데이터 변경)
Delete(데이터 삭제)
